from typing import List, Union

import streamlit as st

from utils.intent import PRIMARY_INTENT_DICT, EnumPrimaryIntent, EnumIndustryStockIntent, \
    EnumMarketStrategyIntent, ENUM_MARKET_STRATEGY_INTENT_DICT, ENUM_INDUSTRY_STOCK_INTENT_DICT

default_instruction = f"""
Í∏àÏúµ Í¥ÄÎ†® ÏßàÎ¨∏Í≥º Ï∞∏Í≥†Ìï†ÎßåÌïú Ïï†ÎÑêÎ¶¨Ïä§Ìä∏ Î¶¨Ìè¨Ìä∏ Î¨∏Îã®Ïù¥ Ï£ºÏñ¥ÏßëÎãàÎã§.
Î¶¨Ìè¨Ìä∏Î•º Ï∞∏Í≥†Ìï¥ÏÑú ÏßÅÏ†ë Î∂ÑÏÑùÌïòÏó¨ ÎãµÎ≥ÄÏùÑ ÏûëÏÑ±Ìï¥ÏïºÌï©ÎãàÎã§.

Î®ºÏ†Ä ÏßàÎ¨∏ ÎÇ¥Ïö©Í≥º ÏßàÎ¨∏ ÏùòÎèÑÎ•º Ìïú Î¨∏Ïû•ÏúºÎ°ú Ï†ïÎ¶¨ÌïòÏÑ∏Ïöî.
Í∑∏ Îã§Ïùå ÏßàÎ¨∏Ïóê ÎåÄÌïú Î∂ÑÏÑù Í≤∞Í≥ºÎ•º Ìïú Î¨∏Ïû•ÏúºÎ°ú ÏöîÏïΩÌïú Ï†úÎ™©ÏùÑ Ï†úÏãúÌïòÏÑ∏Ïöî.
Ï†úÎ™© ÏïÑÎûòÏóê Î∂àÎ¶øÌè¨Ïù∏Ìä∏Î•º ÏÇ¨Ïö©Ìï¥ÏÑú ÌïµÏã¨ÏùÑ 3~5Í∞ÄÏßÄ ÎÇ¥Ïö©ÏùÑ Í∞ÑÍ≤∞ÌïòÍ≤å ÏÑ§Î™ÖÌïòÏÑ∏Ïöî.

Îã§Ïùå Î¨∏Îã®Î∂ÄÌÑ∞ Î≥∏Í≤©Ï†ÅÏúºÎ°ú ÏÑ§Î™ÖÌïòÏÑ∏Ïöî.
Ïù¥ Îïå, ÏÜåÏ†úÎ™©ÏùÑ Ï†ÅÍ∑πÏ†ÅÏúºÎ°ú ÌôúÏö©ÌïòÏÑ∏Ïöî.
ÏÜåÏ†úÎ™©ÏùÄ ÏßÑÌïòÍ≤åÎ°ú ÌëúÏãúÌïòÏÑ∏Ïöî.

ÎßàÏßÄÎßâÏúºÎ°ú, ÎãµÎ≥ÄÏùÑ ÎßàÎ¨¥Î¶¨ÌïòÎäî Î¨∏Îã®ÏùÑ ÏûëÏÑ±ÌïòÏÑ∏Ïöî.
Î∞òÎìúÏãú ÏπúÍ∑ºÌïú Íµ¨Ïñ¥Ï≤¥Î°ú ÎãµÌïòÏÑ∏Ïöî.
"ÏßàÎ¨∏ ÏöîÏïΩ", "Ï†úÎ™©" Îì±Ïùò Îã®Ïñ¥Îäî Î∞òÎìúÏãú ÏÉùÎûµÌïòÏÑ∏Ïöî.
""".strip()


news_instruction = f"""
Í∏àÏúµ Í¥ÄÎ†® ÏßàÎ¨∏Í≥º Ï∞∏Í≥†Ìï†ÎßåÌïú Îâ¥Ïä§ Í∏∞ÏÇ¨Í∞Ä Ï£ºÏñ¥ÏßëÎãàÎã§.
Îâ¥Ïä§ Í∏∞ÏÇ¨Î•º Ï∞∏Í≥†Ìï¥ÏÑú ÏßÅÏ†ë Î∂ÑÏÑùÌïòÏó¨ ÎãµÎ≥ÄÏùÑ ÏûëÏÑ±Ìï¥ÏïºÌï©ÎãàÎã§.
Íµ¨Ï≤¥Ï†ÅÏù∏ ÏàòÏπòÏôÄ ÎîîÌÖåÏùºÌïú ÎÇ¥Ïö©Îì§ÏùÑ Ïñ∏Í∏âÌï¥Ï£ºÏÑ∏Ïöî.
Î∞òÎìúÏãú ÏÑ∏ Î¨∏Îã®ÏúºÎ°ú ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî.
""".strip()


NOT_GIVEN = "ÏÑ†ÌÉù ÏïàÌï®"
example_questions = [
    NOT_GIVEN,
    "Ïñ¥Ï†ú ÎØ∏Íµ≠ ÏãúÏû•ÏóêÏÑúÎäî Ïñ¥Îñ§ ÏùºÎì§Ïù¥ ÏûàÏóàÏßÄ?",
    "ÏµúÍ∑º Î∞úÌëúÎêú ÎØ∏Íµ≠ Í∏àÎ¶¨ Ïù∏ÌïòÍ∞Ä Ï£ºÏãù ÏãúÏû•Ïóê Ïñ¥Îñ§ ÏòÅÌñ•ÏùÑ ÎØ∏Ïπ†Íπå?",
    "Ï†ïÎ∂ÄÏùò ÏÉàÎ°úÏö¥ Î∂ÄÎèôÏÇ∞ Ï†ïÏ±ÖÏù¥ Ï£ºÏãù ÏãúÏû•Ïóê Ïñ¥Îñ§ ÏòÅÌñ•ÏùÑ ÎØ∏Ïπ†Íπå?",
    "ÏµúÍ∑º Ï£ºÏãùÏãúÏû•Ïùò Ï†ÑÎ∞òÏ†ÅÏù∏ Ìä∏Î†åÎìúÎäî?",
    "Ïò¨Ìï¥ Ï£ºÏãùÏãúÏû•Ïùò Ï£ºÏöî Ïù¥Î≤§Ìä∏ÎÇò Ï∂îÏÑ∏Îäî?",
    "ÏßÄÍ∏àÍ≥º Í∞ôÏùÄ Í∏àÏúµÏãúÏû• ÌôòÍ≤ΩÏóêÏÑúÎäî Ïñ¥Îñ§ Ìà¨Ïûê Ï†ÑÎûµÏùÑ Ï∑®Ìï¥ÏïºÌï†Íπå?",
    "ÏÉùÏÑ± AI Í∏∞Ïà†Ïóê ÏòÅÌñ•ÏùÑ Î∞õÏùÑ Ï¢ÖÎ™©ÏùÄ Ïñ¥Îñ§ Í≤ÉÎì§Ïù¥ ÏûàÏùÑÍπå?",
    "Ïò¨Ìï¥ Ïñ¥Îñ§ ÏÇ∞ÏóÖÍµ∞Ïù¥ Ï¢ãÏùÄ ÏÑ±Í¥ÑÎ•¥ ÎÇº Í≤ÉÏúºÎ°ú ÏòàÏÉÅÌï¥?",
    "ÌÖåÏä¨ÎùºÎäî ÌòÑÏû¨ Ìà¨ÏûêÌïòÍ∏∞ Ï¢ãÏùÄ ÏÑ†ÌÉùÏùºÍπå?"
]


def read_stream(response) -> str:
    content = ""
    placeholder = st.empty()
    for part in response:
        if not part.id:
            continue
        delta = part.choices[0].delta
        if delta.content:
            content += delta.content
            placeholder.markdown(content + "‚ñå")
    placeholder.markdown(content)
    return content


def set_page_config():
    st.set_page_config(
        page_icon="üêô",
        page_title="Mr. market octopus"
    )


def write_common_session_state():
    if "question" not in st.session_state:
        st.session_state["question"] = ""


def write_common_style():
    st.markdown("""
    <style>
    [data-testid="stExpanderDetails"] p {
        font-size: 14px;
    }
    [data-testid="stExpanderDetails"] [data-testid="stVerticalBlock"] {
        gap: 0.3rem;
    }
    [data-test-id="stExpanderToggleIcon"] {
        visibility: hidden;
    }
    </style>
    """, unsafe_allow_html=True)


def draw_oversea_report(related_contents: List[dict], expanded: bool = True):
    st.markdown("**üåéÌï¥Ïô∏ Ïï†ÎÑêÎ¶¨Ïä§Ìä∏ Î¶¨Ìè¨Ìä∏**")
    for related_content in related_contents:
        selected_item_metadata = related_content["metadata"]
        title = selected_item_metadata.get("title")
        if not title:
            title = selected_item_metadata.get("filename")
        public_url = selected_item_metadata.get("public_url")
        if not public_url:
            public_url = selected_item_metadata.get("chunk_url")
        with st.expander(title, expanded=expanded):
            if "published_at" in selected_item_metadata:
                st.markdown(selected_item_metadata['published_at'])
            st.markdown(f"score: {round(related_content['score'], 4)}")
            st.markdown(f"selected chunk: {related_content['id'].split('_')[-1]}")
            st.link_button(
                label="üåê See full report",
                url=public_url,
                use_container_width=True
            )
            st.link_button(
                label="üìù See text chunk",
                url=selected_item_metadata['chunk_url'],
                use_container_width=True
            )


def draw_fnguide_report(related_news: List[dict], expanded: bool = True):
    st.markdown("**üá∞üá∑Íµ≠ÎÇ¥ Ïï†ÎÑêÎ¶¨Ïä§Ìä∏ Î¶¨Ìè¨Ìä∏**")
    for news_item in related_news:
        selected_item_metadata = news_item["metadata"]
        with st.expander(f"{selected_item_metadata['publisher']} - {selected_item_metadata['title']}", expanded=expanded):
            st.markdown(selected_item_metadata['published_at'])
            st.markdown(f"score: {round(news_item['score'], 4)}")
            st.link_button(
                label="üåê See full report",
                url=selected_item_metadata["public_url"],
                use_container_width=True
            )
            if "kor_chunk_url" in selected_item_metadata:
                st.link_button(
                    label="üîó See chunks",
                    url=f"https://storage.googleapis.com/financial_analyst/{selected_item_metadata['kor_chunk_url']}",
                    use_container_width=True
                )


def draw_related_report(related_contents: List[dict], expanded: bool = True):
    st.markdown("**Í¥ÄÎ†® Î¶¨Ìè¨Ìä∏**")
    for related_content in related_contents:
        selected_item_metadata = related_content["metadata"]
        expander_header = ""
        if "title" in selected_item_metadata:
            expander_header = selected_item_metadata["title"]
        elif "filename" in selected_item_metadata:
            expander_header = selected_item_metadata["filename"]
        with st.expander(expander_header, expanded=expanded):
            if "published_at" in selected_item_metadata:
                st.markdown(selected_item_metadata['published_at'])
            st.markdown(f"score: {round(related_content['score'], 4)}")
            st.link_button(
                label="üåê See full report",
                url=selected_item_metadata["public_url"],
                use_container_width=True
            )
            if "kor_chunk_url" in selected_item_metadata:
                st.link_button(
                    label="üîó See chunks",
                    url=f"https://storage.googleapis.com/financial_analyst/{selected_item_metadata['kor_chunk_url']}",
                    use_container_width=True
                )
            if "chunk_url" in selected_item_metadata:
                st.link_button(
                    label="üîó See chunks",
                    url=f"https://storage.googleapis.com/mactopus-seeking-alpha/{selected_item_metadata['chunk_url']}",
                    use_container_width=True
                )
            if "content" in selected_item_metadata:
                st.markdown(selected_item_metadata["content"])


def draw_news(news_items: List[dict], target: str, expanded: bool = True):
    st.markdown(f"**{target} Îâ¥Ïä§**")
    for news_item in news_items:
        with st.expander(f"{news_item['publisher']} - {news_item['title']}", expanded=expanded):
            if "published_at" in news_item:
                st.markdown(news_item['published_at'])
            st.markdown(f"score: {round(news_item['similarity'], 4)}")
            st.link_button(
                label="üóûÔ∏è See full news",
                url=news_item["url"],
                use_container_width=True
            )
            st.markdown(news_item["related_paragraph"])


def click_next_question(question: str):
    st.session_state.select = NOT_GIVEN
    st.session_state.question = question


def draw_next_questions(questions: List[str]):
    st.markdown("**Îã§ÏùåÏóê Î¨ºÏñ¥Î≥¥Î©¥ Ï¢ãÏùÄ ÏßàÎ¨∏Îì§**")
    for i, question in enumerate(questions):
        st.button(
            f"Q. {question}",
            key=f"question_{i}",
            on_click=click_next_question,
            args=(question,)
        )


def change_select():
    st.session_state.question = ""


def draw_auto_complete():
    return st.selectbox(
        label="ÏòàÏãú ÏßàÎ¨∏ ÏÑ†ÌÉù",
        options=example_questions,
        on_change=change_select,
        key="select"
    )


def get_question(auto_complete: str):
    if st.session_state.question != "":
        return st.session_state.question
    elif auto_complete != "not select":
        return auto_complete
    return ""


def draw_intent(primary_intent: EnumPrimaryIntent, secondary_intent: Union[EnumMarketStrategyIntent, EnumIndustryStockIntent]):
    primary_intent_kor = PRIMARY_INTENT_DICT[primary_intent]
    secondary_intent_kor = ""
    write_markdown = f"**ÏßàÎ¨∏ ÏùòÎèÑ: {primary_intent_kor}"
    if secondary_intent:
        if primary_intent == EnumPrimaryIntent.STOCK_MARKET_STRATEGY:
            secondary_intent_kor = ENUM_MARKET_STRATEGY_INTENT_DICT[secondary_intent]
        else:
            secondary_intent_kor = ENUM_INDUSTRY_STOCK_INTENT_DICT[secondary_intent]
        write_markdown += f" > {secondary_intent_kor}"
    write_markdown += "**"
    st.markdown(write_markdown)
    return primary_intent_kor, secondary_intent_kor


